{
  "hash": "99d2c2a61d4703364dbe96019593149d",
  "result": {
    "markdown": "---\ntitle: \"Using distributional semantics to annotate for semantic predictors\"\nsubtitle: \"A case study on the English dative alternation\"\nauthor:\n  - Chiara Paolini\n  - Benedikt Szmrecsanyi\n  - Mariana Montes\nformat:\n  revealjs:\n    footer: \"BKL - Li√®ge, 2022-10-21\"\nexecute:\n  echo: false\n---\n\n\n\n\n## Outline\n\n\n- Introduction: the dative alternation \n- From vectors to predictors \n- Forests and clouds \n- Insights and further research \n\n\n# Introduction: the dative alternation\n\n## The dative alternation\n\n::: {.footer}\nIntroduction: the dative alternation\n:::\n\n## Modelling grammatical alternations\n\nTraditional vs distributional predictors.\n\n::: {.footer}\nIntroduction: the dative alternation\n:::\n\n\n\n\n\n# From vectors to predictors\n\n## Automatically-generated semantic predictors\n\nDefine distributional semantics.\n\n::: {.footer}\nFrom vectors to predictors\n:::\n\n## Matrix of recipients\n\n::: {.footer}\nFrom vectors to predictors\n:::\n\n## Clustering\n\n::: {.footer}\nFrom vectors to predictors\n:::\n\n\n\n\n\n\n# Forests and clouds\n\n## Cloud of recipients\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Scatterplot of recipient lemmas. Colors are clusters, labelled by their medoids.](index_files/figure-revealjs/fig-tsne-r-1.png){#fig-tsne-r width=960}\n:::\n:::\n\n\n::: {.footer}\nForests and clouds\n:::\n\n## Cloud of themes\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Scatterplot of themes lemmas. Colors are clusters, labelled by their medoids.](index_files/figure-revealjs/fig-tsne-t-1.png){#fig-tsne-t width=960}\n:::\n:::\n\n\n::: {.footer}\nForests and clouds\n:::\n\n## Random forest of distributional predictors\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Variable importances from a random forest with only distributional predictors.](index_files/figure-revealjs/fig-rf-dist-1.png){#fig-rf-dist width=960}\n:::\n:::\n\n\n::: {.footer}\nForests and clouds\n:::\n\n## Random forest of traditional and distributional predictors\n\nStill need to create the forest. \n\n::: {.footer}\nForests and clouds\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}